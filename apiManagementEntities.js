

A.app({

  menuItems: [
    {
      name: "API Management",
      icon: "list",
      children: [
        {
          name: "API Definitions",
          entityTypeId: "ApiDefinition"
        },
        {
          name: "API Keys",
          entityTypeId: "ApiKey"
        },
        {
          name: "API Throttle Policies",
          entityTypeId: "ApiThrottlePolicy"
        }

      ]
    }
  ],

  entities: function (Fields) {
    return {
      ApiDefinition: {
        title: "API Definition",
        fields: {

          name: Fields.text("API Name").required().unique(),
          apiPolicy: Fields.reference("Policy", "ApiThrottlePolicy").required(),
          isActive: Fields.checkbox("Is Active"),
          notes: Fields.textarea("Notes")
        },


        referenceName: "name",
        beforeDelete: function (ValidationError) {
          throw new ValidationError('Cannot delete! Deactivate instead.');
        },
        afterUpdate: function (NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) { apiDefinition_afterUpdate(NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId); },
        afterCreate: function (NewEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) { apiDefinition_afterUpdate(NewEntity, null, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId); }
      },
      ApiThrottlePolicy:
      {
        title: "API Throttle Policy",
        fields: {
          policyName: Fields.text("Policy Name").required().unique(),
          notes: Fields.textarea("Notes"),
          isActive: Fields.checkbox("Is Active"),
          policy: Fields.json("Policy", {

            $ref: "/jsonschemas/throttle-policy.json"

          }).required(),

        },
        layout: { V: ['policyName', 'notes', 'isActive', { V: ['policy'], labelWidth: 0 }], labelWidth: 4 },
        referenceName: "policyName",
        beforeDelete: function (ValidationError) {
          throw new ValidationError('Cannot delete! Deactivate instead.');
        },
        afterUpdate: function (NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) { apiThrottlePolicy_afterUpdate(NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId); },
        afterCreate: function (NewEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) { apiThrottlePolicy_afterUpdate(NewEntity, null, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId); }
      },
      ApiKey: {
        title: "API Key",
        fields: {
          keyName: Fields.text("Key Name").required().unique(),
          apis: Fields.multiReference("API Assignments", "ApiDefinition").required(),
          key: Fields.text("API Key").readOnly(),
          apiPolicy: Fields.reference("Policy Override", "ApiThrottlePolicy"),
          isActive: Fields.checkbox("Is Active"),
          notes: Fields.textarea("Notes")
          /* TODO: maybe add expiration date */
        },
        beforeDelete: function (ValidationError) {
          throw new ValidationError('Cannot delete! Deactivate instead.');
        },
        beforeCreate: function (Entity, Q, UUID) {

          Entity.key = UUID().toUpperCase(); // assign autogenerated guid as api key

          return Q(null);
        },
        afterUpdate: function (NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) { apiKey_afterUpdate(NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId); },
        afterCreate: function (NewEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) { apiKey_afterUpdate(NewEntity, null, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId); }
      }

    }
  }
});

function apiKey_afterUpdate(NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) {
  // need to package key and any policy overrides
  return Security.asSystem(function () {

    let apiKeyId = 0;

    if (OldEntity) {
      apiKeyId = OldEntity.id;

    } else {
      apiKeyId = NewEntity.id;
    }

    return Crud.crudForEntityType('ApiKey').readEntity(apiKeyId).then(apiKey => {

      return PublishApiKeyChanged(apiKey, Crud, Console, AzureEventGridPublisher, Q)

    }).catch(x => Console.warn(x));

  });

}

function apiDefinition_afterUpdate(NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) {
  // push out api definition    
  return Security.asSystem(function () {

    let apiDefId = 0;

    if (OldEntity) {
      apiDefId = OldEntity.id;

    } else {
      apiDefId = NewEntity.id;
    }

    return Crud.crudForEntityType('ApiDefinition').readEntity(apiDefId).then(apiDef => {

      let payload = {

        apiDefinition: apiDef,
        apiThrottlePolicy: null
      };

      //attach throttle policy
      return Crud.crudForEntityType('ApiThrottlePolicy').readEntity(apiDef.apiPolicy.id).then(throttlePol => {

        payload.apiThrottlePolicy = throttlePol;

        AzureEventGridPublisher.publish('apiDefinition_update', null, payload);

      });


    }).catch(x => Console.warn(x));

  });
}


function apiThrottlePolicy_afterUpdate(NewEntity, OldEntity, Security, Q, Crud, AzureEventGridPublisher, Console, ObjectId) {
  // push out all keys with overrides
  // push out all api definitions    
  return Security.asSystem(function () {


    let policyId = 0;

    if (OldEntity) {
      policyId = OldEntity.id;

    } else {
      policyId = NewEntity.id;
    }

    return Crud.crudForEntityType('ApiThrottlePolicy').readEntity(policyId).then(throttlePol => {

      let payload = {

        "apiThrottlePolicy": throttlePol,
        "apiDefinitions": []

      };


      function Send() {

        AzureEventGridPublisher.publish('apiThrottlePolicy_update', null, payload);
      }

      ///attach all api definitions which reference this policy
      return Crud.crudForEntityType('ApiDefinition').find({ 'apiPolicy.id': ObjectId(throttlePol.id) }).then(apiDefinitions => {

        apiDefinitions.forEach(function (element) {

          payload.apiDefinitions.push(element);

        });

        Send();

        return Q(null);
      }).then(x => {

        //send out api key updates for any keys which have this policy explicitely set
        return Crud.crudForEntityType('ApiKey').find({ 'apiPolicy.id': ObjectId(throttlePol.id) }).then(keys => {

          keys.forEach(function (apiKey) {

            PublishApiKeyChanged(apiKey, Crud, Console, AzureEventGridPublisher, Q)

          });

          return Q(null);

        });

      }).catch(x => Console.warn(x));
    });

  });

}


function PublishApiKeyChanged(apiKey, Crud, Console, AzureEventGridPublisher, Q) {

  let payload = {};

  payload["apiKey"] = apiKey;

  if (apiKey.apiPolicy) {

    Crud.crudForEntityType('ApiThrottlePolicy').readEntity(apiKey.apiPolicy.id).then(throttlePolicy => {

      payload["apiPolicy"] = throttlePolicy;

      Send();

    }).catch(x => Console.warn(x));;

  } else {

    Send();
  }

  function Send() {

    AzureEventGridPublisher.publish('apiKey_update', null, payload);
  }

  return Q(null);
}